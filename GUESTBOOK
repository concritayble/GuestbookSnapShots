#!/usr/bin/env python
#written for the existence or non existence of such information, March 2014
#with thanks to the wizardry of Tom Jennings, Ben Dean and Clay Chaplin.

import Tkinter
import tkMessageBox
import re
import time
import os

global entry
entry = []

from Tkconstants import *

def count_em(valid_path):
   x = 0
   for root, dirs, files in os.walk(valid_path):
       for file in files:
           if file.endswith('.jpg'):
               x = x+1
   print "There are", x, " JPG files in this directory."
   return x

def scandirs(path):
    for root, dirs, files in os.walk(path):
        for currentFile in files:
            print "processing file: " + currentFile
            exts=('.jpg')
            if any(currentFile.lower().endswith(ext) for ext in exts):
                os.remove(os.path.join(root, currentFile))


class myWindow:


    def __init__(self):

        self.mw = Tkinter.Tk()
        self.mw.option_add("*font", ("Arial", 20, "normal", ))
        self.mw.geometry("+5+5")
        self.mw.title("Guest Book")
        self.mw.bind(sequence = "<Control-q>", func = self.bindFunc)

self.lab1 = Tkinter.Label(self.mw,
                                  text = 'Sign in with your email address and hit "Return" twice')
        self.lab1.pack(padx = 10, pady = 10)

        self.entr1 = Tkinter.Entry(self.mw)
        self.entr1.pack()
        self.entr1.bind(sequence = "<Return>", func = self.showEntry)
        self.entr1.focus()

        self.lab2 = Tkinter.Label(self.mw,
                                  text = 'Enter when the room is empty. The light will flash when $
        self.lab2.pack(side = RIGHT, pady = 20)

        self.mw.mainloop()

    def bindFunc(self, a):

        # self.mw.destroy() can't be called directly, because it can't
        # cope with the argument passed by ".bind()".

        self.mw.destroy()

    def showEntry(self, a):

# Parameter "a" isn't used in this method, but it is needed,
        # to be able to deal with the argument passed by ".bind()".


        email = self.entr1.get()

        if not re.match(r"[^@]+@[^@]+\.[^@]+", self.entr1.get()):
            print("error")
            tkMessageBox.showerror(title= "Input", message = "Not a valid email address::\n\n" + s$
        else:
            print("Email address is valid")
            entry.append(email)
            tkMessageBox.showinfo(title= "Input", message = "Thank you for signing the guest book:$

#           dict(entry)
#           print("last entries: ", entry)

            text_file = open("emails.txt", "a")
            text_file.write(str(entry[-1]))
            text_file.write("\n")
            text_file.close()

 print ("Added " + str(entry[-1]) + " to the text file")
            time.sleep(2)
            os.system("/home/pi/EmailerRPI.py")
            print "Called the Emailer script"
            filecount = count_em('/home/pi/')
            print "There are", filecount, " JPG files in this directory."
            time.sleep(2)
            scandirs('/home/pi/')
            time.sleep(2)
            steve = count_em('/home/pi')
            time.sleep(2)
            print steve


if __name__ == "__main__":
   app = myWindow()
